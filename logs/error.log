{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:08"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:12"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:16"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:20"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:20"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:24"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:24"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:28"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:35"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:39"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:43"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:49"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:56:53"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:00"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:04"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:08"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:12"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:12"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:16"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:28"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:32"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:36"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:40"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:40"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:44"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:48"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:53"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:57:57"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:58:01"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:58:01"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:58:05"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:58:05"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:58:23"}
{"level":"error","message":"Failed to fetch projects: \nInvalid `prisma.project.findMany()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\project.service.ts:8:25\n\n  5 type ProjectWithTodos = Project & { todos: Todo[] };\n  6 \n  7 export const getProjects = async (): Promise<ProjectWithTodos[]> => {\n→ 8   return prisma.project.findMany(\nCan't reach database server at `localhost`:`3306`\n\nPlease make sure your database server is running at `localhost`:`3306`.","service":"api-service","timestamp":"2025-09-16 11:58:27"}
{"level":"error","message":"Todo creation failed: \nInvalid `prisma.todo.create()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\todo.service.ts:48:37\n\n  45 }\n  46 \n  47 export async function createTodo(todo: Omit<Todo, 'id'> & { id?: string }): Promise<Todo> {\n→ 48   const created = await prisma.todo.create({\n         data: {\n           id: 'b2f1d286-8cc5-489e-b084-1f746fa555b0',\n           title: 'Test',\n           description: 'Today need to be change',\n           date: '2025-09-16',\n           status: 'todo',\n       +   createdAt: String,\n       +   updatedAt: String,\n           projectId: 0sxifadi641,\n           ~~~~~~~~~\n       ?   locationId?: String | null,\n       ?   history?: NullableJsonNullValueInput | Json,\n           linkedItems: '[]',\n           assignedUsers: '[]',\n           files: '[]',\n           webhooks: '[]',\n           ganttTaskIds: '[]',\n           relatedTaskIds: '[]',\n       +   project: {\n       +     create?: ProjectCreateWithoutTodosInput | ProjectUncheckedCreateWithoutTodosInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutTodosInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   deadline?: String | null\n         }\n       })\n\nUnknown arg `projectId` in data.projectId for type TodoCreateInput. Did you mean `project`?\nArgument createdAt for data.createdAt is missing.\nArgument updatedAt for data.updatedAt is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-16 13:07:05"}
{"level":"error","message":"Todo creation failed: \nInvalid `prisma.todo.create()` invocation in\nD:\\apps\\calendar-todo-backend\\src\\services\\todo.service.ts:48:37\n\n  45 }\n  46 \n  47 export async function createTodo(todo: Omit<Todo, 'id'> & { id?: string }): Promise<Todo> {\n→ 48   const created = await prisma.todo.create({\n         data: {\n           id: '40cb37b9-f47f-4341-b57b-27604baf4283',\n           title: 'Testtt',\n           description: 'dddd',\n           date: '2025-09-16',\n           status: 'todo',\n       +   createdAt: String,\n       +   updatedAt: String,\n           projectId: 0sxifadi641,\n           ~~~~~~~~~\n       ?   locationId?: String | null,\n       ?   history?: NullableJsonNullValueInput | Json,\n           linkedItems: '[]',\n           assignedUsers: '[]',\n           files: '[]',\n           webhooks: '[]',\n           ganttTaskIds: '[]',\n           relatedTaskIds: '[]',\n       +   project: {\n       +     create?: ProjectCreateWithoutTodosInput | ProjectUncheckedCreateWithoutTodosInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutTodosInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   deadline?: String | null\n         }\n       })\n\nUnknown arg `projectId` in data.projectId for type TodoCreateInput. Did you mean `project`?\nArgument createdAt for data.createdAt is missing.\nArgument updatedAt for data.updatedAt is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-16 13:08:43"}
{"level":"error","message":"Todo creation failed: \nInvalid `prisma.todo.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\todo.service.ts:49:37\n\n  46 \n  47 export async function createTodo(todo: Omit<Todo, 'id'> & { id?: string }): Promise<Todo> {\n  48   const { projectId, ...rest } = toPrismaTodoInput(todo);\n→ 49   const created = await prisma.todo.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'Project' record(s) (needed to inline the relation on 'Todo' record(s)) was found for a nested connect on one-to-many relation 'ProjectToTodo'.","service":"api-service","timestamp":"2025-09-16 20:27:08"}
{"level":"error","message":"Todo creation failed: \nInvalid `prisma.todo.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\todo.service.ts:49:37\n\n  46 \n  47 export async function createTodo(todo: Omit<Todo, 'id'> & { id?: string }): Promise<Todo> {\n  48   const { projectId, ...rest } = toPrismaTodoInput(todo);\n→ 49   const created = await prisma.todo.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'Project' record(s) (needed to inline the relation on 'Todo' record(s)) was found for a nested connect on one-to-many relation 'ProjectToTodo'.","service":"api-service","timestamp":"2025-09-16 20:27:12"}
{"level":"error","message":"Todo creation failed: \nInvalid `prisma.todo.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\todo.service.ts:49:37\n\n  46 \n  47 export async function createTodo(todo: Omit<Todo, 'id'> & { id?: string }): Promise<Todo> {\n  48   const { projectId, ...rest } = toPrismaTodoInput(todo);\n→ 49   const created = await prisma.todo.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'Project' record(s) (needed to inline the relation on 'Todo' record(s)) was found for a nested connect on one-to-many relation 'ProjectToTodo'.","service":"api-service","timestamp":"2025-09-16 20:27:25"}
{"level":"error","message":"Todo creation failed: \nInvalid `prisma.todo.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\todo.service.ts:49:37\n\n  46 \n  47 export async function createTodo(todo: Omit<Todo, 'id'> & { id?: string }): Promise<Todo> {\n  48   const { projectId, ...rest } = toPrismaTodoInput(todo);\n→ 49   const created = await prisma.todo.create({\n         data: {\n       +   id: String,\n           title: 'Testttt',\n           description: '',\n           date: '2025-09-16',\n           status: 'todo',\n           createdAt: '2025-09-16T13:33:45.342Z',\n           updatedAt: '2025-09-16T13:33:45.342Z',\n       ?   locationId?: String | null,\n       ?   history?: NullableJsonNullValueInput | Json,\n           linkedItems: '[]',\n           assignedUsers: '[]',\n           files: '[]',\n           webhooks: '[]',\n           ganttTaskIds: '[]',\n           relatedTaskIds: '[]',\n           project: {\n             connect: {\n               id: '1758028089340'\n             }\n           },\n       ?   deadline?: String | null\n         }\n       })\n\nArgument id for data.id is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-16 20:33:45"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T16:56:55.408Z',\n           ~~~~~~~~~\n           endDate: '2025-09-19T16:56:55.408Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: 1758028089340,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-16 23:57:01"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-18T16:56:55.408Z',\n           ~~~~~~~~~\n           endDate: '2025-09-23T16:56:55.408Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: 1758028089340,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-16 23:57:02"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-16T17:03:23.985Z',\n           ~~~~~~~~~\n           endDate: '2025-09-20T17:03:23.985Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: fpxkcwrvw4v,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:03:41"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-18T17:03:23.985Z',\n           ~~~~~~~~~\n           endDate: '2025-09-22T17:03:23.985Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: fpxkcwrvw4v,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:04:30"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:14:48.333Z',\n           ~~~~~~~~~\n           endDate: '2025-09-19T17:14:48.333Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: fpxkcwrvw4v,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:14:57"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:14:48.333Z',\n           ~~~~~~~~~\n           endDate: '2025-09-17T17:14:48.333Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: fpxkcwrvw4v,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:19:09"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:14:48.333Z',\n           ~~~~~~~~~\n           endDate: '2025-09-21T17:14:48.333Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: fpxkcwrvw4v,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:19:09"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:14:27\n\n  11   return prisma.ganttTask.findUnique({ where: { id } });\n  12 };\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n→ 14   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-18T17:20:08.210Z',\n           ~~~~~~~~~\n           endDate: '2025-09-19T17:20:08.210Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           projectId: fpxkcwrvw4v,\n           ~~~~~~~~~\n       +   id: String,\n       +   project: {\n       +     create?: ProjectCreateWithoutGanttTasksInput | ProjectUncheckedCreateWithoutGanttTasksInput,\n       +     connectOrCreate?: ProjectCreateOrConnectWithoutGanttTasksInput,\n       +     connect?: ProjectWhereUniqueInput\n       +   },\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nUnknown arg `projectId` in data.projectId for type GanttTaskCreateInput. Did you mean `project`?\nArgument id for data.id is missing.\nArgument project for data.project is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:20:16"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:16:27\n\n  13 export const createGanttTask = async (task: PrismaGanttTask) => {\n  14   // Map projectId to project relation if present\n  15   const { projectId, ...rest } = task as any;\n→ 16   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-19T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           },\n       +   id: String,\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`?\nArgument id for data.id is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:22:39"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15   // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-19T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: '4a56172d-36ed-4023-b261-2f4ded31ab27',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:24:01"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-20T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: 'd0d03388-7880-4c59-be24-b6a4e08c39b6',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:24:51"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-16T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-20T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: '80c1d4c9-01b4-44e6-bddd-4dc2f892ea95',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:25:49"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-17T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: '19674153-7770-404f-9d23-9bba89947105',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:26:21"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-18T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-22T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: '797373a9-1ced-4505-80de-605ba2116633',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:26:22"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:22:31.852Z',\n           ~~~~~~~~~\n           endDate: '2025-09-23T17:22:31.852Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: 'bd6c7c7f-6939-4fb5-85e6-c4af02caecab',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:27:19"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-19T17:29:10.341Z',\n           ~~~~~~~~~\n           endDate: '2025-09-19T17:29:10.341Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: '52349c65-6402-441d-b3b3-6622a92d9091',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:29:20"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-18T17:29:10.341Z',\n           ~~~~~~~~~\n           endDate: '2025-09-20T17:29:10.341Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: 'ac13f35c-8dca-4416-adff-df814a86af5b',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:29:21"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask) => {\n  15 // Map projectId to project relation if present\n  16   const { projectId, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-17T17:29:10.341Z',\n           ~~~~~~~~~\n           endDate: '2025-09-20T17:29:10.341Z',\n           ~~~~~~~\n           color: 'bg-blue-500',\n           ~~~~~\n           end: '',\n           start: '',\n           id: '1e666bbf-e8ed-4649-b739-2d7f3cc18419',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           }\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\nUnknown arg `color` in data.color for type GanttTaskCreateInput. Did you mean `id`? Available args:\ntype GanttTaskCreateInput {\n  id: String\n  name?: String | Null\n  start?: String | Null\n  end?: String | Null\n  createdAt?: String | Null\n  updatedAt?: String | Null\n  project: ProjectCreateNestedOneWithoutGanttTasksInput\n}\n\n","service":"api-service","timestamp":"2025-09-17 00:30:21"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:17:27\n\n  14 export const createGanttTask = async (task: PrismaGanttTask & { color?: string }) => {\n  15   // Map projectId to project relation if present, and ignore color\n  16   const { projectId, color, ...rest } = task as any;\n→ 17   return prisma.ganttTask.create({\n         data: {\n           name: 'New task',\n           startDate: '2025-09-18T17:32:04.296Z',\n           ~~~~~~~~~\n           endDate: '2025-09-22T17:32:04.296Z',\n           ~~~~~~~\n           end: '',\n           start: '',\n           project: {\n             connect: {\n               id: 'fpxkcwrvw4v'\n             }\n           },\n       +   id: String,\n       ?   createdAt?: String | null,\n       ?   updatedAt?: String | null\n         }\n       })\n\nUnknown arg `startDate` in data.startDate for type GanttTaskCreateInput. Did you mean `start`?\nUnknown arg `endDate` in data.endDate for type GanttTaskCreateInput. Did you mean `name`?\nArgument id for data.id is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:32:11"}
{"level":"error","message":"GanttTask creation failed: \nInvalid `prisma.ganttTask.create()` invocation in\nD:\\COMPANY\\Freelancer\\todo-app\\calendar-be\\src\\services\\ganttTask.service.ts:26:27\n\n  23   end: endDate ?? rest.end,\n  24   project: { connect: { id: projectId } },\n  25 };\n→ 26 return prisma.ganttTask.create({\n       data: {\n         name: 'New task',\n         end: '2025-09-19T17:35:29.791Z',\n         start: '2025-09-17T17:35:29.791Z',\n         project: {\n           connect: {\n             id: 'fpxkcwrvw4v'\n           }\n         },\n     +   id: String,\n     ?   createdAt?: String | null,\n     ?   updatedAt?: String | null\n       }\n     })\n\nArgument id for data.id is missing.\n\nNote: Lines with + are required, lines with ? are optional.\n","service":"api-service","timestamp":"2025-09-17 00:35:38"}
