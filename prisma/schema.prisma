generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String       @default("gmail")
  email       String       @unique
  avatarUrl   String?
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id])
  permissions Permission[] @relation("UserPermissions")
  roleId      String? // <-- Add this line
  role        Role?        @relation(fields: [roleId], references: [id]) // <-- Add this line
  status      Int          @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("user")
}

model Todo {
  id             String  @id
  title          String
  description    String
  date           String
  deadline       String?
  label          String // 'todo' | 'in-progress' | 'review' | 'done'
  createdAt      String
  updatedAt      String
  locationId     String?
  relatedTaskIds Json?
  projectId      String
  project        Project @relation(fields: [projectId], references: [id])
  history        Json?
  linkedItems    Json?
  assignedUsers  Json?
  files          Json?
  webhooks       Json?
  ganttTaskIds   Json?
  assetId        String?
  asset          Asset?  @relation(fields: [assetId], references: [id])
  status         Int     @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("todo")
}

model FileItem {
  id        String  @id
  name      String?
  url       String?
  createdAt String?
  updatedAt String?
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  assetId   String?
  label     String?
  asset     Asset?  @relation(fields: [assetId], references: [id])
  status    Int     @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("fileitem")
}

model Permission {
  id          String   @id
  type        String // 'view' | 'edit' | 'drag' | 'drop'
  resource    String // e.g. 'file:123', 'todo:456', 'user:789'
  userId      String
  projectId   String
  assetId     String? // New: link to asset
  name        String?  @default("") // NEW: permission name, optional
  description String?  @default("") // NEW: permission description, optional
  project     Project  @relation(fields: [projectId], references: [id])
  asset       Asset?   @relation(fields: [assetId], references: [id])
  users       User[]   @relation("UserPermissions")
  status      Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permission")
}

model LinkedItem {
  id          String  @id
  todoId      String
  title       String
  description String?
  url         String
  label       String? // 'active' | 'archived' | 'pending'
  createdAt   String
  updatedAt   String
  projectId   String
  project     Project @relation(fields: [projectId], references: [id])
  assetId     String?
  asset       Asset?  @relation(fields: [assetId], references: [id])
  status      Int     @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("linkeditem")
}

model GanttTask {
  id        String  @id
  name      String?
  start     String?
  end       String?
  createdAt String?
  updatedAt String?
  startDate String?
  endDate   String?
  color     String?
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  assetId   String?
  asset     Asset?  @relation(fields: [assetId], references: [id])
  position  Int? // Task order/position (set in app logic, not auto-increment in Prisma for MySQL)
  status    Int     @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("gantttask")
}

model Webhook {
  id         String  @id
  name       String
  platform   String
  token      String?
  chatId     String?
  webhookUrl String?
  enabled    Boolean
  projectId  String
  project    Project @relation(fields: [projectId], references: [id])
  assetId    String? // <-- Add this line
  asset      Asset?  @relation(fields: [assetId], references: [id]) // <-- Add this line
  status     Int     @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  jobs      Job[]
  @@map("webhook")
}

model Project {
  id          String       @id
  name        String
  description String?
  avatarUrl   String?      @db.Text
  plan        String?
  members     Int?
  todos       Todo[]
  files       FileItem[]
  permissions Permission[]
  linkedItems LinkedItem[]
  ganttTasks  GanttTask[]
  webhooks    Webhook[]
  users       User[]
  locations   Location[]
  roles       Role[] // <--- Add this line
  notifications Notification[] // <--- Add this line
  notificationTemplates NotificationTemplate[] // <-- Add this line for 1:N
  status      Int          @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  History     History[]

  @@map("project")
}

model History {
  id        String   @id
  changes   Json?
  date      DateTime
  type      String // 'todo' | 'gantt-task'
  action    String
  payload   Json?
  timestamp String
  user      String?
  status    Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@map("history")
}

model AssetType {
  id     String  @id @default(uuid())
  name   String  @unique
  assets Asset[]
  status Int     @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("assettype")
}

model Asset {
  id        String    @id @default(uuid())
  name      String
  typeId    String
  type      AssetType @relation(fields: [typeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations to all asset-using models
  todos       Todo[]
  files       FileItem[]
  locations   Location[]
  ganttTasks  GanttTask[]
  linkedItems LinkedItem[]
  Permission  Permission[]
  status      Int          @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  Webhook     Webhook[]

  @@map("asset")
}

model Location {
  id             String   @id @default(uuid())
  name           String
  latitude       Float
  longitude      Float
  googleMapsLink String?
  projectId      String
  project        Project  @relation(fields: [projectId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assetId        String?
  asset          Asset?   @relation(fields: [assetId], references: [id])
  status         Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("location")
}

model Role {
  id        String   @id @default(uuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  users     User[] // <-- This line allows Role.users (0:N)
  status    Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([name, projectId])
  @@map("role")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String // e.g. 'info', 'warning', 'error', 'success', 'custom'
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  templateId String? // <-- Add this line for mapping
  template   NotificationTemplate? @relation(fields: [templateId], references: [id]) // <-- Add this line
  status    Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1

  @@map("notification")
}

model NotificationTemplate {
  id        String   @id @default(uuid())
  name      String
  subject   String
  body      String
  type      String? // e.g. 'info', 'warning', 'custom', etc.
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  notifications Notification[] // <-- Add this line for 1:N mapping
  status    Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notificationtemplate")
}

// This file defines the Prisma schema, including the data model and database connection settings for the MySQL database.
model Job {
  id        String   @id @default(uuid())
  name      String
  schedule  String
  enabled   Boolean  @default(true)
  webhookId String
  webhook   Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  status    Int      @default(1) // delete: -2, remove: -1, inactive: 0, active: 1
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("job")
}